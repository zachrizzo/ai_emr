-- -- Seed script for initial data using auth.admin.create_user

-- DO $$
-- DECLARE
--     v_user RECORD;
--     v_org_id UUID;
--     v_loc_id UUID;
-- BEGIN
--     -- 0) Ensure the necessary extension is enabled for auth.admin functions
--     IF NOT EXISTS (
--         SELECT 1
--         FROM pg_available_extensions
--         WHERE name = 'supabase_auth_admin'
--     ) THEN
--         RAISE EXCEPTION 'The supabase_auth_admin extension is not available. Please enable it before running the seed script.';
--     END IF;

--     -- 1) Clean up existing data
--     DELETE FROM note_comments;
--     DELETE FROM note_sections;
--     DELETE FROM clinical_notes;
--     DELETE FROM note_templates;
--     DELETE FROM appointments;
--     DELETE FROM emergency_contacts;
--     DELETE FROM patients;
--     DELETE FROM providers;
--     DELETE FROM organization_members;
--     DELETE FROM locations;
--     DELETE FROM users;
--     DELETE FROM organizations;

--     RAISE NOTICE 'Cleaned up existing data.';

--     -- 2) Create the organization first
--     INSERT INTO organizations (
--         name,
--         type,
--         address,
--         phone_number,
--         email,
--         website,
--         created_at,
--         updated_at
--     )
--     VALUES (
--         'Cilwa Medical Center',
--         'hospital',
--         '123 Healthcare Ave, Phoenix, AZ 85001',
--         '(555) 123-4567',
--         'info@cilwamedical.com',
--         'www.cilwamedical.com',
--         NOW(),
--         NOW()
--     )
--     RETURNING id INTO v_org_id;

--     RAISE NOTICE 'Created organization with ID: %', v_org_id;

--     -- 3) Create the auth user via auth.admin.create_user
--     SELECT * INTO v_user FROM auth.admin.create_user(
--         email := 'zachcilwa@gmail.com',
--         password := 'Zach013074!', -- Ensure this meets your password policy
--         email_confirm := TRUE,
--         user_metadata := jsonb_build_object(
--             'first_name', 'Zach',
--             'last_name', 'Cilwa',
--             'phone_number', '(555) 987-6543',
--             'role', 'provider'
--         )
--     );

--     RAISE NOTICE 'Created user with ID: %', v_user.id;

--     -- 4) Insert user details into your custom "users" table
--     INSERT INTO users (
--         id,
--         first_name,
--         last_name,
--         role,
--         phone_number,
--         organization_id,
--         created_at,
--         updated_at
--     )
--     VALUES (
--         v_user.id,
--         'Zach',
--         'Cilwa',
--         'provider',
--         '(555) 987-6543',
--         v_org_id,
--         NOW(),
--         NOW()
--     );

--     RAISE NOTICE 'Inserted user details into users table.';

--     -- 5) Add the user as an organization member with 'admin' role
--     INSERT INTO organization_members (
--         organization_id,
--         user_id,
--         role,
--         created_at,
--         updated_at
--     )
--     VALUES (
--         v_org_id,
--         v_user.id,
--         'admin',
--         NOW(),
--         NOW()
--     );

--     RAISE NOTICE 'Added user % as admin to organization %', v_user.id, v_org_id;

--     -- 6) Create locations associated with the organization
--     WITH new_locations AS (
--         INSERT INTO locations (
--             organization_id,
--             name,
--             address,
--             phone_number,
--             email,
--             status,
--             manager_name,
--             operating_hours,
--             timezone,
--             capacity,
--             is_primary,
--             created_at,
--             updated_at
--         )
--         SELECT
--             v_org_id,
--             name,
--             address || ', ' || state || ' ' || zip_code,
--             phone,
--             email,
--             'active',
--             'Dr. ' || (ARRAY['John Smith', 'Sarah Johnson', 'Michael Chen', 'Emily Davis'])[floor(random() * 4 + 1)],
--             'Mon-Fri: 8:00 AM - 5:00 PM',
--             'America/Phoenix',
--             CASE type
--                 WHEN 'hospital' THEN 500
--                 WHEN 'clinic' THEN 200
--                 ELSE 100
--             END,
--             name = 'Main Hospital',
--             NOW(),
--             NOW()
--         FROM (
--             VALUES
--                 ('Main Hospital', '123 Healthcare Ave', 'AZ', '85001', '(555) 123-4567', 'main@cilwamedical.com', 'hospital'),
--                 ('North Clinic', '456 Medical Pkwy', 'AZ', '85254', '(555) 234-5678', 'north@cilwamedical.com', 'clinic'),
--                 ('South Clinic', '789 Health Blvd', 'AZ', '85282', '(555) 345-6789', 'south@cilwamedical.com', 'clinic'),
--                 ('East Valley Center', '321 Care Way', 'AZ', '85201', '(555) 456-7890', 'east@cilwamedical.com', 'urgent_care')
--         ) AS l(name, address, state, zip_code, phone, email, type)
--         RETURNING id, organization_id, name
--     )
--     SELECT id INTO v_loc_id FROM new_locations WHERE name = 'Main Hospital';

--     RAISE NOTICE 'Created location with ID: %', v_loc_id;

--     -- 7) Create test patients
--     WITH new_patient AS (
--         INSERT INTO patients (
--             organization_id,
--             first_name,
--             last_name,
--             date_of_birth,
--             gender,
--             email,
--             phone_number,
--             address,
--             preferred_language,
--             preferred_communication,
--             cultural_considerations,
--             created_at,
--             updated_at
--         )
--         SELECT
--             v_org_id,
--             first_name,
--             last_name,
--             date_of_birth,
--             gender,
--             lower(first_name || '.' || last_name || '@email.com'),
--             '(555) ' || floor(random() * 900 + 100)::text || '-' || floor(random() * 9000 + 1000)::text,
--             floor(random() * 999 + 1)::text || ' Patient St, Phoenix, AZ ' || (floor(random() * 89 + 10) + 85000)::text,
--             'English',
--             'email',
--             CASE WHEN random() < 0.3 THEN 'Prefers same-gender provider' ELSE NULL END,
--             NOW(),
--             NOW()
--         FROM (
--             VALUES
--                 ('John', 'Doe', '1980-01-15'::date, 'male'),
--                 ('Jane', 'Smith', '1975-03-22'::date, 'female'),
--                 ('Robert', 'Johnson', '1990-07-10'::date, 'male'),
--                 ('Maria', 'Garcia', '1988-11-05'::date, 'female'),
--                 ('David', 'Chen', '1965-09-30'::date, 'male'),
--                 ('Sarah', 'Wilson', '1992-04-18'::date, 'female'),
--                 ('Michael', 'Brown', '1970-12-25'::date, 'male'),
--                 ('Emily', 'Davis', '1985-06-08'::date, 'female')
--         ) AS p(first_name, last_name, date_of_birth, gender)
--         RETURNING id, organization_id, first_name, last_name
--     )
--     , emergency_contacts AS (
--         INSERT INTO emergency_contacts (
--             patient_id,
--             name,
--             relationship,
--             phone_number,
--             organization_id,
--             created_at,
--             updated_at
--         )
--         SELECT
--             np.id,
--             'Emergency Contact for ' || np.first_name || ' ' || np.last_name,
--             (ARRAY['Spouse', 'Parent', 'Sibling', 'Child'])[floor(random() * 4 + 1)],
--             '(555) ' || floor(random() * 900 + 100)::text || '-' || floor(random() * 9000 + 1000)::text,
--             np.organization_id,
--             NOW(),
--             NOW()
--         FROM new_patient np
--     )
--     , additional_providers AS (
--         INSERT INTO providers (
--             first_name,
--             last_name,
--             specialty,
--             phone_number,
--             email,
--             organization_id,
--             location_id,
--             created_at,
--             updated_at
--         )
--         SELECT
--             p.first_name,
--             p.last_name,
--             p.specialty,
--             '(555) ' || floor(random() * 900 + 100)::text || '-' || floor(random() * 9000 + 1000)::text,
--             lower(p.first_name || '.' || p.last_name || '@cilwamedical.com'),
--             nl.organization_id,
--             nl.id,
--             NOW(),
--             NOW()
--         FROM (
--             VALUES
--                 ('Sarah', 'Johnson', 'Family Medicine'),
--                 ('Michael', 'Chen', 'Internal Medicine'),
--                 ('Emily', 'Rodriguez', 'Pediatrics'),
--                 ('David', 'Kim', 'Cardiology'),
--                 ('Lisa', 'Patel', 'Neurology'),
--                 ('James', 'Wilson', 'Orthopedics'),
--                 ('Maria', 'Garcia', 'Dermatology'),
--                 ('Robert', 'Lee', 'Psychiatry')
--         ) AS p(first_name, last_name, specialty)
--         CROSS JOIN new_locations nl
--         WHERE nl.name = 'Main Hospital' -- Assign to Main Hospital for consistency
--         RETURNING id, organization_id
--     )
--     , new_appointments AS (
--         INSERT INTO appointments (
--             organization_id,
--             patient_id,
--             provider_id,
--             location_id,
--             appointment_date,
--             duration_minutes,
--             status,
--             reason_for_visit,
--             appointment_type,
--             visit_type,
--             created_at,
--             updated_at
--         )
--         SELECT
--             np.organization_id,
--             np.id,
--             p.id,
--             l.id,
--             NOW() + (floor(random() * 30) || ' days')::interval + (floor(random() * 8) || ' hours')::interval,
--             CASE WHEN random() < 0.3 THEN 60 ELSE 30 END,
--             (ARRAY['scheduled', 'checked_in', 'in_progress', 'completed'])[floor(random() * 4 + 1)]::appointment_status,
--             (ARRAY['Annual checkup', 'Follow-up', 'Consultation', 'Urgent care', 'Routine examination'])[floor(random() * 5 + 1)],
--             (ARRAY['routine', 'urgent', 'follow_up', 'specialist', 'procedure'])[floor(random() * 5 + 1)],
--             (ARRAY['in_person', 'video', 'phone'])[floor(random() * 3 + 1)]::appointment_visit_type,
--             NOW(),
--             NOW()
--         FROM new_patient np
--         JOIN additional_providers p ON p.organization_id = np.organization_id
--         JOIN locations l ON l.id = p.location_id
--         WHERE random() < 0.3
--         RETURNING id, organization_id, patient_id, provider_id
--     )
--     , new_templates AS (
--         INSERT INTO note_templates (
--             name,
--             content,
--             specialty,
--             category,
--             organization_id,
--             created_by,
--             created_at,
--             updated_at
--         )
--         SELECT DISTINCT
--             t.name,
--             t.content,
--             t.specialty,
--             t.category,
--             a.organization_id,
--             v_user.id,
--             NOW(),
--             NOW()
--         FROM new_appointments a
--         CROSS JOIN LATERAL (
--             VALUES
--                 ('General Examination Template', 'Chief Complaint:\n\nHistory of Present Illness:\n\nReview of Systems:\n\nPhysical Examination:\n\nAssessment:\n\nPlan:', 'General Medicine', 'examination'),
--                 ('Follow-up Visit Template', 'Progress Notes:\n\nCurrent Symptoms:\n\nMedication Review:\n\nPlan:', 'General Medicine', 'follow_up'),
--                 ('Specialist Consultation Template', 'Reason for Consultation:\n\nHistory:\n\nFindings:\n\nRecommendations:', 'Specialty Care', 'consultation'),
--                 ('Urgent Care Template', 'Chief Complaint:\n\nHistory:\n\nExamination:\n\nDiagnosis:\n\nTreatment Plan:', 'Urgent Care', 'urgent')
--         ) AS t(name, content, specialty, category)
--         RETURNING id, specialty
--     )
--     , new_notes AS (
--         INSERT INTO clinical_notes (
--             patient_id,
--             provider_id,
--             appointment_id,
--             organization_id,
--             content,
--             type,
--             status,
--             template_id,
--             metadata,
--             tags,
--             created_at,
--             updated_at
--         )
--         SELECT
--             a.patient_id,
--             v_user.id,
--             a.id,
--             a.organization_id,
--             '{"type": "doc", "content": [{"type": "paragraph", "content": [{"type": "text", "text": "Visit notes for appointment"}]}]}'::jsonb,
--             CASE WHEN random() < 0.7 THEN 'template' ELSE 'manual' END,
--             (ARRAY['draft', 'final', 'signed'])[floor(random() * 3 + 1)],
--             nt.id,
--             jsonb_build_object(
--                 'specialty', nt.specialty,
--                 'visit_type', 'routine'
--             ),
--             ARRAY['routine', 'follow_up'],
--             NOW(),
--             NOW()
--         FROM new_appointments a
--         JOIN new_templates nt ON nt.organization_id = a.organization_id
--         WHERE random() < 0.8
--         RETURNING id, patient_id, provider_id
--     )
--     , note_sections AS (
--         INSERT INTO note_sections (
--             note_id,
--             section_type,
--             title,
--             content,
--             order_index,
--             created_at,
--             updated_at
--         )
--         SELECT
--             n.id,
--             sections.section_type,
--             sections.title,
--             jsonb_build_object(
--                 'content',
--                 CASE sections.section_type
--                     WHEN 'subjective' THEN 'Patient presents with ' ||
--                         (ARRAY['mild symptoms', 'moderate discomfort', 'significant concerns', 'follow-up needs'])[floor(random() * 4 + 1)]
--                     WHEN 'objective' THEN 'Examination reveals ' ||
--                         (ARRAY['normal findings', 'slight abnormalities', 'significant findings', 'improved condition'])[floor(random() * 4 + 1)]
--                     WHEN 'assessment' THEN 'Assessment indicates ' ||
--                         (ARRAY['good progress', 'stable condition', 'needs monitoring', 'requires follow-up'])[floor(random() * 4 + 1)]
--                     WHEN 'plan' THEN 'Plan includes ' ||
--                         (ARRAY['continued monitoring', 'medication adjustment', 'follow-up in 2 weeks', 'referral to specialist'])[floor(random() * 4 + 1)]
--                 END
--             ),
--             sections.order_index,
--             NOW(),
--             NOW()
--         FROM new_notes n
--         CROSS JOIN LATERAL (
--             SELECT 'subjective' AS section_type, 'Subjective' AS title, 0 AS order_index
--             UNION ALL
--             SELECT 'objective', 'Objective', 1
--             UNION ALL
--             SELECT 'assessment', 'Assessment', 2
--             UNION ALL
--             SELECT 'plan', 'Plan', 3
--         ) AS sections
--     )
--     -- 8) Create some test comments
--     INSERT INTO note_comments (
--         note_id,
--         user_id,
--         content,
--         created_at,
--         updated_at
--     )
--     SELECT
--         nn.id,
--         CASE WHEN random() < 0.7 THEN nn.provider_id ELSE v_user.id END,
--         (ARRAY[
--             'Follow-up required in 2 weeks',
--             'Patient showing good progress',
--             'Medication adjusted based on response',
--             'Labs ordered for next visit',
--             'Referral to specialist recommended',
--             'Patient education provided',
--             'Symptoms improving with current treatment'
--         ])[floor(random() * 7 + 1)],
--         NOW(),
--         NOW()
--     FROM new_notes nn
--     WHERE random() < 0.5;

--     RAISE NOTICE 'Seed script completed successfully.';
-- END $$;
